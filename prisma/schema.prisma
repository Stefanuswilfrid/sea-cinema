// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String?  @unique
  name        String?
  age         Int?
  bio         String?
  balance     Int
  wishlistIds String[] @db.ObjectId

  avatarUrl String?

  hashedPassword  String?
  Transaction     Transaction[]
  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  Message Message[]
}

model Movie {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String   @unique
  description  String
  release_date DateTime
  poster_url   String
  age_rating   Int
  seats        Seat[] // Relation to seats
  price        Int?

  transactions Transaction[]
}

model Seat {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  movie    Movie   @relation(fields: [movieId], references: [id])
  movieId  String
  label    String // E.g., "A1", "A2", ...
  occupied Boolean
}

enum TransactionType {
  MOVIE_TICKET_BOOKING
  WITHDRAWAL
  TOP_UP
}

model Transaction {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  user      User            @relation(fields: [userId], references: [id])
  userId    String          @db.ObjectId
  movie     Movie?          @relation(fields: [movieId], references: [id])
  movieId   String?         @db.ObjectId
  seats     Int[] // Now optional: Array of seat indices or null
  quantity  Int? // Quantity of items or actions (e.g., number of tickets)
  type      TransactionType // Use the enum to specify the transaction type
  totalCost Float // Total cost involved in the transaction
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
